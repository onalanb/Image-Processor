package com.onalan.ip;

import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import org.glassfish.jersey.media.multipart.FormDataContentDisposition;
import org.glassfish.jersey.media.multipart.FormDataParam;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

@Path("/image")
public class ImageResource {
    @POST
    @Path("/rotate")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    @Produces("image/jpeg")
    //curl -F "file=@Azuki.jpg" http://localhost:8080/IP-1.0-SNAPSHOT/api/image/rotate?degrees=30 --output Azuki_rotated.jpg
    public Response rotate(@FormDataParam("file") InputStream uploadedInputStream,
                           @FormDataParam("file") FormDataContentDisposition fileDetail,
                           @QueryParam("degrees") int degrees) {
        BufferedImage buffImg = null;
        String fileName = fileDetail.getFileName();
        System.out.println("fileName = " + fileName);
        String[] fileNameParts = fileDetail.getFileName().split("\\.");
        String fileFormat = fileNameParts[fileNameParts.length - 1];
        byte[] imageData = null;
        try {
            buffImg = ImageIO.read(uploadedInputStream);

            final double rads = Math.toRadians(degrees);
            final double sin = Math.abs(Math.sin(rads));
            final double cos = Math.abs(Math.cos(rads));
            final int w = (int) Math.floor(buffImg.getWidth() * cos + buffImg.getHeight() * sin);
            final int h = (int) Math.floor(buffImg.getHeight() * cos + buffImg.getWidth() * sin);
            final BufferedImage rotatedImage = new BufferedImage(w, h, buffImg.getType());
            final AffineTransform at = new AffineTransform();
            at.translate(w / 2, h / 2);
            at.rotate(rads,0, 0);
            at.translate(-buffImg.getWidth() / 2, -buffImg.getHeight() / 2);
            final AffineTransformOp rotateOp = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
            rotateOp.filter(buffImg, rotatedImage);

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            //ImageIO.write(rotatedImage, "jpg", baos);
            ImageIO.write(rotatedImage, fileFormat, baos);
            imageData = baos.toByteArray();
        }
        catch (IOException e) {
            e.printStackTrace();
        }

        // uncomment line below to send non-streamed
        return Response.ok(imageData).build();
    }

    @POST
    @Path("/flip")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    @Produces("image/jpeg")
    // curl -F "file=@Azuki.jpg" http://localhost:8080/IP-1.0-SNAPSHOT/api/image/flip?direction=horizontal --output Azuki_flipped.jpg
    public Response flip(@FormDataParam("file") InputStream uploadedInputStream,
                         @FormDataParam("file") FormDataContentDisposition fileDetail,
                         @QueryParam("direction") String direction) {
        BufferedImage buffImg = null;
        String fileName = fileDetail.getFileName();
        System.out.println("fileName = " + fileName);
        String[] fileNameParts = fileDetail.getFileName().split("\\.");
        String fileFormat = fileNameParts[fileNameParts.length - 1];
        byte[] imageData = null;
        try {
            buffImg = ImageIO.read(uploadedInputStream);

            AffineTransform tx = null;
            if(direction.equals("horizontal")) {
                tx = AffineTransform.getScaleInstance(-1, 1);
                tx.translate(-buffImg.getWidth(), 0);
            } else if(direction.equals("vertical")) {
                tx = AffineTransform.getScaleInstance(1, -1);
                tx.translate(0, -buffImg.getHeight());
            }
            AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);
            buffImg = op.filter(buffImg, null);

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(buffImg, fileFormat, baos);
            imageData = baos.toByteArray();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return Response.ok(imageData).build();
    }

    @POST
    @Path("/resize")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    @Produces("image/jpeg")
    // curl -F "file=@Azuki.jpg" "http://localhost:8080/IP-1.0-SNAPSHOT/api/image/resize?width=200&height=300" --output Azuki_resized.jpg
    public Response resize(@FormDataParam("file") InputStream uploadedInputStream,
                           @FormDataParam("file") FormDataContentDisposition fileDetail,
                           @QueryParam("width") int width,
                           @QueryParam("height") int height) {
        BufferedImage buffImg = null;
        String fileName = fileDetail.getFileName();
        System.out.println("fileName = " + fileName);
        String[] fileNameParts = fileDetail.getFileName().split("\\.");
        String fileFormat = fileNameParts[fileNameParts.length - 1];
        byte[] imageData = null;
        try {
            buffImg = ImageIO.read(uploadedInputStream);
            BufferedImage resizedImg = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = resizedImg.createGraphics();
            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            g2.drawImage(buffImg, 0, 0, width, height, null);
            g2.dispose();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(resizedImg, fileFormat, baos);
            imageData = baos.toByteArray();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return Response.ok(imageData).build();
    }

    @POST
    @Path("/grayscale")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    @Produces("image/jpeg")
    // curl -F "file=@Azuki.jpg" http://localhost:8080/IP-1.0-SNAPSHOT/api/image/grayscale --output Azuki_grayscale.jpg
    public Response grayscale(@FormDataParam("file") InputStream uploadedInputStream,
                              @FormDataParam("file") FormDataContentDisposition fileDetail) {
        BufferedImage buffImg = null;
        String fileName = fileDetail.getFileName();
        System.out.println("fileName = " + fileName);
        String[] fileNameParts = fileDetail.getFileName().split("\\.");
        String fileFormat = fileNameParts[fileNameParts.length - 1];
        byte[] imageData = null;
        try {
            buffImg = ImageIO.read(uploadedInputStream);
            BufferedImage grayImg = new BufferedImage(buffImg.getWidth(), buffImg.getHeight(), BufferedImage.TYPE_BYTE_GRAY);
            Graphics2D g2 = grayImg.createGraphics();
            g2.drawImage(buffImg, 0, 0, null);
            g2.dispose();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(grayImg, fileFormat, baos);
            imageData = baos.toByteArray();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return Response.ok(imageData).build();
    }


}